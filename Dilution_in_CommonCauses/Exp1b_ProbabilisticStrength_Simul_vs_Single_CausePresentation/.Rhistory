dat <- tdata_14
View(dat)
View(tdata_14)
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
dat_wide <- spread(tdata_14, variable, value)
colnames(dat_wide) <- c("sID", "Links", "first", "last")
dat_wide -> t
r <- cor(t$first, t$last)
r
dat <- tdata_14
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
dat_wide <- spread(tdata_14, variable, value)
colnames(dat_wide) <- c("sID", "Links", "first", "last")
dat_wide -> t
r <- cor(t$first, t$last)
r
# now compute ES and SE and CI of it
# using the esc package because it gives SE of the ES directly
library(esc)
# get means and sds
m1 <- dat %>%
filter(variable == "1st")%>%
summarize(Mean1 = mean(value))
sd1 <- dat %>%
filter(variable == "1st")%>%
summarize(SD1 = sd(value))
m2 <- dat %>%
filter(variable == "4th")%>%
summarize(Mean2 = mean(value))
sd2 <- dat %>%
filter(variable == "4th")%>%
summarize(SD2 = sd(value))
esc_mean_sd(
grp1m = m1[,1], grp1sd = sd1[,1], grp1n = length(dat$sID)/2,
grp2m = m2[,1], grp2sd = sd2[,1], grp2n = length(dat$sID)/2,
r = r,
es.type = "d"
)
library(meta)
#tdata.wide <- read.delim("dummy_data.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
madata <- read.delim("EffectSizes_of_Studies.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
# Now conduct the MA
m <- metagen(TE,
seTE,
data=madata,
studlab=paste(Author),
comb.fixed = FALSE,
comb.random = TRUE,
prediction=FALSE,
sm="SMD",
method.ci = "z")
m
# packages
library(ez)
library(reshape2)
library(reshape)
library(ggplot2)
library(plyr)
library(pastecs)
library(ez)
library(data.table)
library(tidyverse)
library(showtext)
font_add_google("Poppins", "Poppins")
font_add_google("Roboto Mono", "Roboto Mono")
showtext_auto()
#tdata.wide <- read.delim("dummy_data.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
tdata <- read.delim("Data_Supp_Exp_CC7_CC3_C1.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
# demographics
# one participant indicated 3 for age. Needs to be excluded for the age analysis.
tdata_age <- tdata
min(tdata_age$Age)
max(tdata_age$Age)
mean(tdata_age$Age)
sd(tdata_age$Age)
# 1 = male, 2 = female, 3 = other
table(tdata$Sex)
# to create a chart, the data must be in long format and only contain the relevant dependent variables
# 1. make a subset with only the relevant dvs
tdata_sub <- subset(tdata, select = 1:7)
# 2. reshape into long format
tdata_sub <- tdata_sub %>% gather(variable, value, 4:6)
tdata_sub$variable <- factor(tdata_sub$variable, levels = c("X1_strength_rating", "X3_strength_rating", "X7_strength_rating"),
labels = c("one", "three", "seven"))
tdata_sub$value <- tdata_sub$value * 0.01
myTheme <- theme(plot.title = element_text(face="bold", size = 22),
axis.title.x = element_text(face = "bold", size = 20),
axis.title.y = element_text(face = "bold", size = 20),
axis.text.x = element_text(size = 18, angle = 0),
axis.text.y = element_text(size = 14, angle = 0),
legend.text = element_text(size = 18),
legend.title = element_text(face = "bold", size = 18),
strip.text.x = element_text(size = 18),
#panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.text = element_text(colour ="black"),
axis.ticks = element_line(colour ="black"))
library(see)
## first, turn sID into a factor
tdata_sub$sID <- factor(tdata_sub$sID)
pd <- position_dodge(width = 0.3)
tdata_sub$valueJitter <- jitter(tdata_sub$value, factor = 1, amount = 0.04)
theme_set(theme_light(base_size = 20, base_family = "Poppins"))
# new labes for the facets
capacity.labs <- c("Capacity: no info", "Capacity: same", "Capacity: different")
names(capacity.labs) <- c("none", "same", "different")
g <- ggplot(tdata_sub, aes(x=variable, y=valueJitter, group = sID)) +
guides(fill=FALSE)+
#ggtitle("Subjects' causal srength ratings") +
scale_y_continuous(limits = c(-0.05, 1.05), breaks=seq(0, 1, 0.1), expand = c(0,0)) +
#scale_x_discrete(labels=c("Single-effect \n cause", "Multiple-effects \n cause")) +
#stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black", alpha =0.5) +
geom_violinhalf(aes(y = value, group = variable, fill = variable), color = NA, position=position_dodge(1), alpha = 0.2)+
geom_line(position = pd, color = "black", size = 1, alpha=0.04) +
geom_point(aes(color = variable), position = pd, alpha = 0.2) +
stat_summary(aes(y = value,group=1), fun.data = mean_cl_boot, geom = "errorbar", width = 0, size = 1) +
stat_summary(aes(y = value,group=1), fun.y=mean, colour="black", geom="line",group=1, size = 1.5, linetype = "solid", alpha = 1)+
stat_summary(aes(y = value,group=1, fill = variable), fun.y=mean, geom="point", color = "black", shape = 22, size = 5, group=1, alpha = 1)+
stat_summary(aes(y = value,group=1), fun.y=median, geom="point", color = "black", shape = 3, size = 4, group=1, alpha = 1, position = position_dodge(width = 0.5))+
labs(x = "Number Cause's Effects", y = "Causal Strength Rating") +
#scale_color_manual(name = "Entity",values=c("#fc9272", "#3182bd"))+
#scale_fill_manual(name = "Entity",values=c("#fc9272", "#3182bd"))+
theme(legend.position = "none")+
myTheme
g
#ggsave("results_lines.svg",width=15.5,height=9)
ggsave("results_graph_lines.pdf",width=15.5,height=9)
################################################################################################################
##################################### Statistical Analyses #####################################################
################################################################################################################
library(pastecs)
library(lme4)
library(nlme)
library(ez)
##################################### Create descriptive stats ###################################
by(tdata_sub$value, list(tdata_sub$variable), stat.desc , basic = FALSE)
##################################### Model ######################################################
library(afex)
library(emmeans)
a1 <- aov_car(value ~ Crystal_Order*Q_Order + Error(sID/(variable)), tdata_sub)
a1
# same ANOVA as before
lmeModel <- lmer(value ~ Crystal_Order*Q_Order*variable + (1|sID), data=tdata_sub)
# follow-up analysis
ls1 <- lsmeans(a1, c("variable")) # joint evaluation (basically gives the same table)
ls1
library(effsize)
# one vs. three
tdata_13 <- subset(tdata_sub, variable != "seven")
cohen.d(tdata_13$value, tdata_13$variable, paired = T)
dat <- tdata_13
View(dat)
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
dat_wide <- spread(tdata_18, variable, value)
dat_wide <- spread(tdata_13, variable, value)
View(dat_wide)
View(tdata_13)
tdata_13 <- subset(tdata_13, select = c(1:6))
dat <- tdata_13
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
dat_wide <- spread(tdata_13, variable, value)
colnames(dat_wide) <- c("sID", "Links", "first", "last")
dat_wide -> t
r <- cor(t$first, t$last)
r
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
dat_wide <- spread(tdata_13, variable, value)
colnames(dat_wide) <- c("sID", "Links", "first", "last")
dat_wide -> t
r <- cor(t$first, t$last)
dat <- tdata_13
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
dat_wide <- spread(tdata_13, variable, value)
colnames(dat_wide) <- c("sID", "Links", "first", "last")
dat_wide -> t
dat <- tdata_13
tdata_13 <- subset(tdata_sub, variable != "seven")
tdata_13 <- subset(tdata_13, select = c(1:3,5:6))
tdata_13 <- subset(tdata_sub, variable != "seven")
tdata_13 <- subset(tdata_13, select = c(1:3,5:6))
tdata_17 <- subset(tdata_sub, variable != "three")
tdata_17 <- subset(tdata_17, select = c(1:3,5:6))
dat <- tdata_13
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
dat_wide <- spread(tdata_13, variable, value)
colnames(dat_wide) <- c("sID", "Links", "first", "last")
dat_wide -> t
dat <- tdata_13
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
dat_wide <- spread(tdata_13, variable, value)
dat_wide -> t
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
dat_wide <- spread(tdata_13, variable, value)
dat_wide -> t
dat <- tdata_13
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
dat_wide <- spread(tdata_13, variable, value)
dat_wide -> t
r <- cor(t$one, t$three)
r
dat <- tdata_13
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
dat_wide <- spread(tdata_13, variable, value)
dat_wide -> t
r <- cor(t$one, t$three)
r
# now compute ES and SE and CI of it
# using the esc package because it gives SE of the ES directly
library(esc)
# get means and sds
m1 <- dat %>%
filter(variable == "one")%>%
summarize(Mean1 = mean(value))
sd1 <- dat %>%
filter(variable == "one")%>%
summarize(SD1 = sd(value))
m2 <- dat %>%
filter(variable == "three")%>%
summarize(Mean2 = mean(value))
sd2 <- dat %>%
filter(variable == "three")%>%
summarize(SD2 = sd(value))
esc_mean_sd(
grp1m = m1[,1], grp1sd = sd1[,1], grp1n = length(dat$sID)/2,
grp2m = m2[,1], grp2sd = sd2[,1], grp2n = length(dat$sID)/2,
r = r,
es.type = "d"
)
dat <- tdata_17
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
dat_wide <- spread(tdata_17, variable, value)
dat_wide -> t
r <- cor(t$one, t$three)
dat <- tdata_17
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
dat_wide <- spread(tdata_17, variable, value)
dat_wide -> t
r <- cor(t$one, t$seven)
r
# now compute ES and SE and CI of it
# using the esc package because it gives SE of the ES directly
library(esc)
# get means and sds
m1 <- dat %>%
filter(variable == "one")%>%
summarize(Mean1 = mean(value))
sd1 <- dat %>%
filter(variable == "one")%>%
summarize(SD1 = sd(value))
m2 <- dat %>%
filter(variable == "seven")%>%
summarize(Mean2 = mean(value))
sd2 <- dat %>%
filter(variable == "seven")%>%
summarize(SD2 = sd(value))
esc_mean_sd(
grp1m = m1[,1], grp1sd = sd1[,1], grp1n = length(dat$sID)/2,
grp2m = m2[,1], grp2sd = sd2[,1], grp2n = length(dat$sID)/2,
r = r,
es.type = "d"
)
View(dat)
#tdata.wide <- read.delim("dummy_data.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
madata <- read.delim("EffectSizes_of_Studies.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
# Now conduct the MA
m <- metagen(TE,
seTE,
data=madata,
studlab=paste(Author),
comb.fixed = FALSE,
comb.random = TRUE,
prediction=FALSE,
sm="SMD",
method.ci = "z")
m
# packages
library(ez)
library(reshape2)
library(reshape)
library(ggplot2)
library(plyr)
library(pastecs)
library(ez)
library(data.table)
library(tidyverse)
library(showtext)
font_add_google("Poppins", "Poppins")
font_add_google("Roboto Mono", "Roboto Mono")
showtext_auto()
#tdata.wide <- read.delim("dummy_data.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
tdata <- read.delim("Data_Suppl2_CC_vs_SE_TelepathicAliens.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
# demographics
min(tdata$Age)
max(tdata$Age)
mean(tdata$Age)
sd(tdata$Age)
# 1 = male, 2 = female, 3 = non-binary, 4 = don't wanne say
table(tdata$Sex)
# reorder factor
tdata$Effects <- factor(tdata$Effects, levels = c("blue", "yellow"), labels = c("blue", "yellow"))
tdata$Target <- factor(tdata$Target, levels = c("first", "second", "third"), labels = c("first", "second", "third"))
# to create a chart, the data must be in long format and only contain the relevant dependent variables
# 1. make a subset with only the relevant dvs
tdata_sub <- subset(tdata, select = 1:5)
# 2. reshape into long format
tdata_sub <- tdata_sub %>% gather(variable, value, 4:5)
tdata_sub$variable <- factor(tdata_sub$variable, levels = c("strength_single", "strength_multiple"),
labels = c("single", "multiple"))
tdata_sub$value <- tdata_sub$value * 0.01
myTheme <- theme(plot.title = element_text(face="bold", size = 22),
axis.title.x = element_text(face = "bold", size = 20),
axis.title.y = element_text(face = "bold", size = 20),
axis.text.x = element_text(size = 18, angle = 0),
axis.text.y = element_text(size = 14, angle = 0),
legend.text = element_text(size = 18),
legend.title = element_text(face = "bold", size = 18),
strip.text.x = element_text(size = 18),
#panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.text = element_text(colour ="black"),
axis.ticks = element_line(colour ="black"))
library(see)
## first, turn sID into a factor
tdata_sub$sID <- factor(tdata_sub$sID)
pd <- position_dodge(width = 0.3)
tdata_sub$valueJitter <- jitter(tdata_sub$value, factor = 1, amount = 0.04)
theme_set(theme_light(base_size = 20, base_family = "Poppins"))
# new labes for the facets
g <- ggplot(tdata_sub, aes(x=variable, y=valueJitter, group = sID)) +
guides(fill=FALSE)+
#facet_grid( ~ Side + Q_order)+
#ggtitle("Subjects' causal srength ratings") +
scale_y_continuous(limits = c(-0.05, 1.05), breaks=seq(0, 1, 0.1), expand = c(0,0)) +
scale_x_discrete(labels=c("single-effect \n cause", "common \n cause")) +
#stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black", alpha =0.5) +
geom_violinhalf(aes(y = value, group = variable, fill = variable), color = NA, position=position_dodge(1), alpha = 0.3)+
geom_line(position = pd, color = "black", size = 1, alpha=0.04) +
geom_point(aes(color = variable), position = pd, alpha = 0.2) +
stat_summary(aes(y = value,group=1), fun.data = mean_cl_boot, geom = "errorbar", width = 0, size = 1) +
stat_summary(aes(y = value,group=1), fun.y=mean, colour="black", geom="line",group=1, size = 1.5, linetype = "solid", alpha = 1)+
stat_summary(aes(y = value,group=1, fill = variable), fun.y=mean, geom="point", color = "black", shape = 22, size = 5, group=1, alpha = 1)+
stat_summary(aes(y = value,group=1), fun.y=median, geom="point", color = "black", shape = 3, size = 4, group=1, alpha = 1, position = position_dodge(width = 0.5))+
labs(x = "Entity", y = "Causal Strength Rating") +
scale_color_manual(name = "Entity",values=c("#fc9272", "#3182bd"))+
scale_fill_manual(name = "Entity",values=c("#fc9272", "#3182bd"))+
theme(legend.position = "none")+
myTheme
g
ggsave("results_graph_lines.pdf",width=12,height=9)
################################################################################################################
##################################### Statistical Analyses #####################################################
################################################################################################################
library(pastecs)
library(lme4)
library(nlme)
library(ez)
##################################### Create descriptive stats ###################################
by(tdata_sub$value, list(tdata_sub$variable), stat.desc , basic = FALSE)
##################################### Model ######################################################
library(afex)
library(emmeans)
a1 <- aov_car(value ~ Effects*Target*variable + Error(sID/(variable)), tdata_sub)
a1
# same ANOVA as before
lmeModel <- lmer(value ~ variable + (1|sID), data=tdata_sub)
# follow-up analysis
ls1 <- lsmeans(a1, c("variable")) # joint evaluation (basically gives the same table)
ls1
###############
# a conditional analysis
ls2 <- lsmeans(a1, c("variable")) # group means by between-condition
ls2
# simple contrast
pairs(ls2) # compares rep-measure differences separately for each between-factor level
# compute the confidence interval for the singular causation differences in each between-subject condition
# sending
t <- qt(0.975, 294, lower.tail = TRUE, log.p = FALSE)
#t
effect <- "Mdiff"
Mdiff <- 0.103
SE <- 0.017
CI <- SE*t
CI_low <- Mdiff - CI
CI_up <- Mdiff + CI
Mdiff
CI_low
CI_up
# Plot
myTheme <- theme(plot.title = element_text(face="bold", size = 22),
axis.title.x = element_text(face = "bold", size = 20),
axis.title.y = element_text(face = "bold", size = 20),
axis.text.x = element_text(size = 18, angle = 0),
axis.text.y = element_text(size = 25, angle = 0),
legend.text = element_text(size = 18),
legend.title = element_text(face = "bold", size = 18),
strip.text.x = element_text(size = 18),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
#panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.text = element_text(colour ="black"),
axis.ticks = element_line(colour ="black"))
theme_set(theme_light(base_size = 30, base_family = "Poppins"))
barchart <- ggplot()+
myTheme+
#guides(fill=FALSE)+
#facet_wrap(~Latency + SampleSize, ncol=2)+
#ggtitle("Mean difference (95% CI)") +
#coord_cartesian(ylim=c(-0.1,2)) +
scale_y_continuous(limits = c(-0.1, 0.5), breaks=seq(-0.1, 0.5, 0.1), expand = c(0,0)) +
scale_x_discrete(labels=c("r")) +
#annotate("rect", xmin=1.7, xmax=2.3, ymin=0.95, ymax=1.05, color="#31a354", fill = "white", size = 1) +
#stat_summary(fun.y=mean, colour="grey20", geom="point", shape = 21, size = 3)+
#stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black")+
#stat_summary(fun.data = mean_cl_boot, geom = "errorbar", position = position_dodge(width = 0.90), width = 0.2) +
#geom_jitter(width = 0.3, height = 0.02, alpha = 0.6, colour = "red") +
#ggtitle("Means (95% bootstr. CIs)") +
#theme(axis.text.x = element_text(size = 10, angle = 0, hjust = 0.5))+
labs(x= "", y = "Mean change") +
#scale_color_manual(values=c("#005083",  "#f0b64d"))# +
#scale_fill_manual(values=c("#969696",  "#969696"))
#annotate("point", x = 1, y = 100, colour = "firebrick", size = 2)+
#annotate(xmin = -Inf, xmax = Inf, ymin = 4.77-1.96*0.297, ymax = 4.77+1.96*0.297, geom = "rect", alpha = 0.2, fill = "firebrick")+
#annotate(xmin = -Inf, xmax = Inf, ymin = 5.02-1.96*0.372, ymax = 5.02+1.96*0.372, geom = "rect", alpha = 0.2, fill = "blue")+
#annotate(geom = "hline",yintercept = 100, y = 100, color = "red")+
annotate("pointrange", x = 1, y = Mdiff, ymin = CI_low, ymax = CI_up, colour = "black", size = 1.5, shape = 24, fill = "darkgrey")+
#annotate("pointrange", x = 2, y = 5.02, ymin = 5.02-1.96*0.372, ymax = 5.02+1.96*0.372, colour = "blue", size = 0.8, shape = 15)+
#annotate("text", x = 0.5, y = 2.6, family = "Poppins", size = 6, color = "gray20", label = "Impfeffekt")+
#geom_curve(aes(x = 0.5, y = 3, xend = 0.9, yend = 4),arrow = arrow(length = unit(0.03, "npc")),color = "gray20", curvature = +0.2)+
#annotate("text", x = 1.8, y = 2.6, family = "Poppins", size = 6, color = "gray20", label = "Dosierungseffekt")+
#geom_curve(aes(x = 1.8, y = 3, xend = 2, yend = 4),arrow = arrow(length = unit(0.03, "npc")),color = "gray20", curvature = +0.2)+
annotate(geom = "hline",yintercept = 0, y = 0, color = "red", size = 1.2)+
theme(plot.background = element_rect(
fill = "white",
colour = "black",
size = 1
))
barchart
#ggsave("delta_sending.svg",width=2.5,height=4)
#ggsave("delta_sending.pdf",width=2.5,height=4)
# compute Cohen's d
library(rstatix)
# subset for the four panels shown in the figure
tdata_sub %>% cohens_d(value ~ variable, paired = TRUE)
d <- 0.3467912
# get confidence intervals for d
# 1) compute correlations for the ratings
cor.test(tdata$strength_multiple, tdata$strength_single)
cor <- 0.3991987
# 2) Now compute SE for d
n <- 300
# formula: Sqrt((1/n + d^2/n)*2*(1-r))
SEd_pos_gen <- sqrt((1/n + d^2/n)*2*(1-cor))
SEd_pos_gen
View(tdata)
t <- tdata
dat <- tdata_sub
View(dat)
dat <- tdata_sub
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
t <- tdata
r <- cor(t$strength_single, t$strength_multiple)
r
dat <- tdata_sub
# since we have a repeated-meausres design, we now need the correlations of the ratings
library(dplyr) # for pipe operator
t <- tdata
r <- cor(t$strength_single, t$strength_multiple)
r
# now compute ES and SE and CI of it
# using the esc package because it gives SE of the ES directly
library(esc)
# get means and sds
m1 <- dat %>%
filter(variable == "single")%>%
summarize(Mean1 = mean(value))
sd1 <- dat %>%
filter(variable == "single")%>%
summarize(SD1 = sd(value))
m2 <- dat %>%
filter(variable == "multiple")%>%
summarize(Mean2 = mean(value))
sd2 <- dat %>%
filter(variable == "multiple")%>%
summarize(SD2 = sd(value))
esc_mean_sd(
grp1m = m1[,1], grp1sd = sd1[,1], grp1n = length(dat$sID)/2,
grp2m = m2[,1], grp2sd = sd2[,1], grp2n = length(dat$sID)/2,
r = r,
es.type = "d"
)
